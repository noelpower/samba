WSP properties are described in a number of sections in the MS-WSP protocol document. The document says that all properties are categorised as follows

  "GUID and PropId: Together, these parameters establish the unique identifier for documents.
  isColumn: A boolean value set to TRUE if, and only if, the property can be returned as a
requested property as specified in the ProjectionColumnsOffsets argument to a RunNewQuery Generic Search Service (GSS) abstract interface call.
inInvertedIndex: A boolean value set to TRUE if, and only if, the property can be an argument to CContentRestriction within the RestrictionSet argument to a RunNewQuery GSS abstract interface call.
  columnIndexType: This parameter defines whether sorting, grouping, and filtering are allowed for this property, as defined in the SortOrders, Groupings, and Restrictions parameters of the
  RunNewQuery GSS abstract interface call. The columnIndexType parameter is a string set to one of the following"
additionally the property type 'VT_XXXX' and max size are known

however not all properties described match this, only properties mentioned in the "full property table" are fully described, others mentioned e.g. in "Standard" & "Open" property sections (and associated tables) have just the GUID, propid & property data type described, still other properies are only mentioned in the Example section and one needes to manually extract the info.

We need the property descriptions and some scripting helps here, in this directory there is

allprops-from-msdn-wsp.csv:
    a csv file made from the "full property table" exported from http://msdn.microsoft.com/en-us/library/cc251767.aspx)
extra-props.csv:
    a csv file of the same format containing the other properties mentioned above and additionally a few more from gregors wireshark-wip repo)

and in directory source4/scripting/bin
gen_wsp_props.py:
    a simple python script to generate code from the csv files above, the result code can be cut'n'pasted wherever the property info is needed (probably needs to be put in some library code)


example:

    gen_wsp_props.py allprops-from-msdn-wsp.csv props

will generated prop.c containing some structures and arrays that implement a map of data describing the properties

    gen_wsp_props.py allprops-from-msdn-wsp.csv props extra-props.csv

does the same thing but includes the extra properties

extra-props.csv was generated by basically grabbing the property definititions
from gregors wireshark repo http://repo.or.cz/r/wireshark-wip.git (epan/dissectors/packet-mswsp.c) and additionally the output from

   gen_wsp_props.py allprops-from-msdn-wsp.csv

munged the output together into a source file and doing a comparison and spitting out the missing properties, something like....

static void dump_missing_props(void)
{
	struct full_guid_propset *my_gen_propset = full_propertyset;
	struct prop_id_name *gregor_item = NULL;
	int i;
	TALLOC_CTX *ctx = talloc_init(NULL);
	for (i = 0; i < ARRAY_SIZE(GuidPropertySet); i++) {
		/* does the guid exist in mylist */
		my_gen_propset = find_in_existing(&GuidPropertySet[i].guid);
 		gregor_item = GuidPropertySet[i].id_map;
		if (my_gen_propset == NULL) {
			/* we are missing this guid and *all* its properties */
			while (gregor_item->id) {
				printf("%s,{%s},%d,FALSE,FALSE,,Int32,,,\n", gregor_item->name, GUID_string(ctx, &GuidPropertySet[i].guid), gregor_item->id);
				gregor_item++;
			}
			continue;
		}

		/* cycle through gregors properties and make sure I have them */
		while (gregor_item->id) {
			if (!property_id_exists(my_gen_propset,
						gregor_item->id)) {
				printf("%s,{%s},%d,FALSE,FALSE,,Int32,,,\n", gregor_item->name, GUID_string(ctx, &GuidPropertySet[i].guid), gregor_item->id);
			}
			gregor_item++;
		}
	}
}
